<template>
    <nav>
        <!-- <router-link to="/login">Sign in</router-link> -->
        <!-- <router-link to="/LoginButton"><v-btn>Sign up</v-btn></router-link>
                    <LoginButton /> -->
        notes prior to labtime
        questions:
        we're using his api
        just a testing tool for apis
        we need to match what we're making in postman
        you're on the right track!
        writing something in the backend that matches that documentation that we're
        currently using.

        we don't need to implement the front-end stuff
        to make a restaurant - just need to make

        Mark's notes:
        (experiment)
        give us a general direction for the order in which we should be working on the project
        this is to help us out going through the architecture and the logic of what should be donee

        ability to create a user and then log in as a user. Whichever one first.
        create an api call and log in as those users.

        sign up and login page.
        there are two types of users that use your application.

        registration page will look different than sign up page.
        (switch that says login in as a user, or login in as a restaurant so you know the end point that's being used)
        registration page will be different. you can have a different view for the two if you want to. You can make in
        one
        that gives different required fields. Those fields are not required when you log in as a regular user.

        At this point, it's up to you the order that you want to implement responsiveness, given the fact that Vuetify
        gives
        you a tool that makes it easy. vuetify breakpoint system. You will still need to go mobile upwards.
        VUETIFY BREAKPOINT SYSTEM

        then start making the features for the users and RESTAURANTS
        the next thing (easiest to achieve) is to create a user profile page or restaurant page.
        You will display the informaiton - need to remember the user page yiou're going to only allow a user
        who owns that information to use that information. make api call with the token and you'll know you're logged
        in. cookies (token)

        in the restaurant page (public), the restaurant infomation page and the menu. All the information is going to be
        concentrated
        in the header. banner, icon in header. the rest of the page can display menu items.

        If you want to add the `edit` functionality you can but save it for last. the ability to change a username and
        password is
        not going to change much else.

        Just go through the end points and implement one function after the other
        (the logout can be done when doing login. on the click of a button, you do that api call and delete the session
        token)

        if logging in as a user, you'll redirect them to the explore page

        the next thing is the deletions can be the last thing, OR if we're not feeling like making progress with the
        other things
        we can do that now

        in order for menu to exist, you need to implement the ability to add menu items (suggestion only, Mark's logic)
        create the ability to add menu items from the restaurant side (not client) then a form or seperate view, you can
        make it
        like an overlay if you like.

        once added the ability to create menu items, you can start testing the ability to view the menu items. viewing
        them should be
        something that is available to both the user and the resto. if you're smart about it, it's the exact same view.
        The resto
        will have some additional options (such as edit buttons and delete buttons). If visiting, just see the menu.

        nav to resto page and see all pictures, prices, descriptions and so on. After we can add menu items (skip over
        the patching),
        as an option you can add the ability to delete menu items just so you can easily test it.

        then move on with the ability to create orders
        client can make orders - when logged in as a client and you're on a specific resto page, click the item, later,
        confirm the shopping cart choices,
        then api is added to the orders end point, then the order is submitted.

        once you've made the order post, you should be able to see the orders.
        orders GET is behaving differently based on whether you're the user or the client. If resto, you see all the
        orders made to you.
        you can have a hybrid page with separate views, then you choose and check who the user is logged in as and you
        send to the correct page.
        The more correct implementation is just having one page with dual functionality. Essentially you can just
        overload the same view and the view will change
        based on who you are in the system. After you can view all your orders, you would likely have a shopping cart
        that lists items in order (or collapsible list)
        should be able to see what you ordered and what was ordered to you as a restaurant.

        NOW THAT WE'RE FINISHED ALL THE POSTS AND ALL THE GETS

        implement the order patch (a user or client). If you're a client, the only button is cancel. Only if it meets
        conditions. Patch cancel.
        the restaurant will have two buttons, one is confirmed, one is complete. The order status will be reflected in
        some way in both
        interfaces for the gets.
        If you want to have a word that says it, or color code, it the design is up to you.

        previous patches that we left for later.
        menu patch - change menu items. prices, names, desciptions (esp prices)
        add edit button that makes the fields editable or a new form to change
        next up, delete, with a confirmation to make it fool-proof.
        if a user presses delete and doesn't get a confirmation, they may wish to have no deleted it.

        single api call, just a question of whether you're sending the api call with the correct id

        then you can go back and do client and restuarant patches (profiles), button to switch and make fields editable
        and save button.
        so you can have it in place, or a seperate form that opens up that a user can change whichever fields are
        allowed to be changed.

        the least important function is the client delete with a confirmation; it's a one-button thing.

        at this point you can start polishing the design. once the functionality is done. you can start replacing
        buttons.
        you might miscalculate the time it takes to get the design correct.

        make sure it works, then you can start playing with the design. you can start replacing fonts, titles,
        reactivity, layout. Don't
        just make it completely undesigned - it will look messy that way. Have a bare-bone layout then just polish it.
        then see how much time
        you can to polish the design. or if you feel like you're not getting anywhere, you can just turn your brain off
        and play with colors. When you feel like you're not going anywhere in terms of functionality, you can just
        change the pretty stuff
        on the outside. reactivity should work as well.

        That's it. that's all the project requires. it's all a matter of just having a plan, don't lose track of the
        plan.

        postman is a very useful tool. The test data is up to you. mark is not looking at the test data. mark is using
        his stuff. he will be
        able to test our implementation. we need to see what the interface looks like. it doesn't need to look
        realistic.
        couple of restaurants that have a banner. same goes for the profile picture. same goes for menu items.

        don't need to add a bunch of stuff for every single menu item. you do need to do it at least a couple of times.
        say you have a card
        structure to see what it looks like if the image is there vs the image is not there.

        a couple more things.
        take your time to familiarize yourself with vuetify - especially the input fields are very useful and have good
        design. form validation for
        instance.

        do we install the router then do vuetify.

        One downside is the default html elements, vuetify actually redesigns them, but the vuetify buttons are super
        simple to do. instead of button, you type v-btn and you're good to go!

        VERY IMPORTANT
        VUE-INPUT-MODEL
        - this is very important for two-way binding between input forms and variables.
        how to tie between directive with the name of the variable. ie api call to the login interface, you just have to
        go username password and so on. look it up on vuetify.
        in the past we would go to the input box . value and so on
        YOU HAVE TO USE THIS IN ORDER FOR IT TO WORK.

    </nav>
</template>

<script>

// import axios from "axios";
// import ExploreOptions from "@/views/ExploreOptions.vue";
export default {
    name: "NavBar",
}
</script>

<style scoped>

</style>